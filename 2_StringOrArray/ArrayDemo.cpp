#include <string>
#include <iostream>
using std::string;
// 通过下列using声明, 可以在函数体内直接使用标准库的名字
using std::cout;
using std::cin;
using std::endl;

int main(int argc, char const *argv[]) {

        cout << "************************数组的初始化**************************************" << endl;
        //关于数组的初始化, 声明的数组大小, 必须是常量表达式, 如果数组的array[size]中使用了size那么size记得使用constexpr关键字修饰为常量
        //显示初始化数组
        const unsigned size = 5;
        int a1[size] = {1,3,5};           // 数组中有三个元素, 元素值分别为1,3,5
        int a2[] = {1,3,5};               // 长度是3的数组, 等价于上面
        int a3[5] = {1,3,5};              // 数组的长度为5, 等价于 = {1,3,5,0,0}

        //字符数组的特殊性
        char c1[] = "c++";                // 长度应该是4, 因为字符串包含着一个空字符等价于 = {'c','+','c','\0'}

        // 数组的内容不能拷贝到其他数组作为初始值, 也不能为其赋值例如
        // int a4 = a1;  a4 = a1;         // 这都是错误的

        // 比较复杂的数组声明
        int *ptrs[10];                    // ptrs 表示一个含有10个整型指针的数组对象  ==> 理解为数组的对象类型为int*
            //int &refs[10];              // 这是一个错误事例, 因为不存在元素对象是引用类型的数组
        int (*Parray)[5] = &a1;           // 首先parray表明是一个指针对象, 指向的是一个int类型长度为5的数组, 所以右侧需要对一个对象使用接地址符来获取指针
        int (&arrRef)[5] = a1;            // 首先parray表明是一个引用, 引用的是一个int类型 长度为5 的数组, 因为是引用对象, 所以右侧直接赋值一个同样类型对象即可
            // int *(&array)[10]= ptrs;   // array是一个数组的引用, 然后该数组的类型是int指针

    return 0;
}
